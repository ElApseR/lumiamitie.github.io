<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">lmnsh</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://lumiamitie.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://lumiamitie.github.io" />
<updated>2015-08-08T13:33:03+09:00</updated>
<id>http://lumiamitie.github.io/</id>
<author>
  <name>Minho Lee</name>
  <uri>http://lumiamitie.github.io/</uri>
  <email>lumiamitie@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Mapping with ggplot2+shp]]></title>
  <link>http://lumiamitie.github.io/r/visualization/mapping-with-ggplot2</link>
  <id>http://lumiamitie.github.io/r/visualization/mapping-with-ggplot2</id>
  <published>2015-08-08T00:00:00+09:00</published>
  <updated>2015-08-08T00:00:00+09:00</updated>
  <author>
    <name>Minho Lee</name>
    <uri>http://lumiamitie.github.io</uri>
    <email>lumiamitie@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img src=&quot;../../../images/macphoto.jpg&quot; alt=&quot;cover-image&quot; /&gt;
여기서는 shp파일을 불러와서 직접 ggplot2를 이용해 지도를 그리는 방법을 설명하려고 한다&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
library(maptools)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
## Loading required package: sp
## Checking rgeos availability: TRUE
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
library(ggplot2)
&lt;/code&gt;
maptools 패키지를 실행시키면 &lt;code&gt;Checking rgeos availability&lt;/code&gt; 라는 문구가 나오는데 여기서 FALSE가 나온다면 rgeos 패키지를 설치해주자&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.diva-gis.org/gdata&quot;&gt;여기 주소&lt;/a&gt;를 통해 한국의 행정구역이 표시된 shp파일을 구해서 데이터를 불러오도록 한다. &lt;strong&gt;Administrative areas&lt;/strong&gt;항목을 다운로드 받는다. 그 중에서 &lt;code&gt;KOR_adm2.shp&lt;/code&gt;파일을 &lt;code&gt;maptools::readShapePoly()&lt;/code&gt;함수로 불러오고, &lt;code&gt;str()&lt;/code&gt; 함수로 데이터를 살펴보자.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shp2 &amp;lt;- readShapePoly(&quot;D:\\data\\gis\\SouthKorea_source\\KOR_adm\\KOR_adm2.shp&quot;)
str(shp2@data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;  ## &#39;data.frame&#39;:	228 obs. of  18 variables:
    $ ID_0      : int  124 124 124 124 124 124 124 124 124 124 ...
    $ ISO       : Factor w/ 1 level &quot;KOR&quot;: 1 1 1 1 1 1 1 1 1 1 ...
    $ NAME_0    : Factor w/ 1 level &quot;South Korea&quot;: 1 1 1 1 1 1 1 1 1 1 ...
    $ ID_1      : int  1591 1591 1591 1591 1591 1592 1592 1592 1587 1588 ...
    $ NAME_1    : Factor w/ 16 levels &quot;Busan&quot;,&quot;Chungcheongbuk-do&quot;,..: 14 14 14 14 14 15 15 15 10 11 ...
    $ ID_2      : int  19391 19392 19393 19394 19395 19396 19397 19398 19347 19348 ...
    $ NAME_2    : Factor w/ 208 levels &quot;Andong&quot;,&quot;Ansan&quot;,..: 166 179 191 197 204 34 36 39 186 13 ...
    $ VARNAME_2 : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
    $ NL_NAME_2 : Factor w/ 9 levels &quot;?? | ??&quot;,&quot;??? |  ???&quot;,..: 6 6 6 6 6 6 5 6 6 6 ...
    $ HASC_2    : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
    $ CC_2      : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
    $ TYPE_2    : Factor w/ 3 levels &quot;Gu&quot;,&quot;Gun&quot;,&quot;Si&quot;: 3 2 2 2 3 1 1 1 3 1 ...
    $ ENGTYPE_2 : Factor w/ 3 levels &quot;City&quot;,&quot;County&quot;,..: 1 2 2 2 1 3 3 3 1 3 ...
    $ VALIDFR_2 : Factor w/ 1 level &quot;Unknown&quot;: 1 1 1 1 1 1 1 1 1 1 ...
    $ VALIDTO_2 : Factor w/ 1 level &quot;Present&quot;: 1 1 1 1 1 1 1 1 1 1 ...
    $ REMARKS_2 : Factor w/ 0 levels: NA NA NA NA NA NA NA NA NA NA ...
    $ Shape_Leng: num  1.63 12.39 2.17 2 7.53 ...
    $ Shape_Area: num  0.0809 0.0463 0.06 0.0473 0.0484 ...
    -attr(*, &quot;data_types&quot;)= chr  &quot;N&quot; &quot;C&quot; &quot;C&quot; &quot;N&quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;데이터를 보면 &lt;code&gt;NAME_1&lt;/code&gt; 항목에는 광역시와 도 등 광역단체목록이 담겨있고, &lt;code&gt;NAME_2&lt;/code&gt;에는 시/군 과 서울의 구가 들어있다.&lt;/p&gt;

&lt;p&gt;일단은 shp 데이터를 불러온 것 만으로도 지도의 형태는 살펴볼 수 있다&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
plot(shp2)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/qb64zrq2mqrzftt/unnamed-chunk-3-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt;를 이용해서 지도를 그리려면 이 데이터를 데이터 프레임으로 변경해야 하는데 &lt;code&gt;ggplot2::fortify()&lt;/code&gt; 함수를 이용해서 shp 데이터를 데이터 프레임으로 바꿀 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
shp2_ffd_noregion &amp;lt;- fortify(shp2)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
head(shp2_ffd_noregion)
&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##       long      lat order  hole piece group id
## 1 127.5484 35.08423     1 FALSE     1   0.1  0
## 2 127.5519 35.07868     2 FALSE     1   0.1  0
## 3 127.5509 35.07233     3 FALSE     1   0.1  0
## 4 127.5491 35.06628     4 FALSE     1   0.1  0
## 5 127.5443 35.05591     5 FALSE     1   0.1  0
## 6 127.5422 35.04578     6 FALSE     1   0.1  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 데이터를 보면 &lt;code&gt;group&lt;/code&gt;과 &lt;code&gt;id&lt;/code&gt;가 숫자로 구분된 것을 볼 수 있는데, 나중에 다른 데이터를 합칠 수 있도록 어떤 변수로 지역을 구분할지 명시할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;shp2_ffd &amp;lt;- fortify(shp2, region = &quot;NAME_1&quot;)
shp2_ffd2 &amp;lt;- fortify(shp2, region = &quot;NAME_2&quot;)
head(shp2_ffd)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##       long      lat order  hole piece   group    id
## 1 129.0179 35.07678     1 FALSE     1 Busan.1 Busan
## 2 129.0179 35.07653     2 FALSE     1 Busan.1 Busan
## 3 129.0176 35.07653     3 FALSE     1 Busan.1 Busan
## 4 129.0176 35.07625     4 FALSE     1 Busan.1 Busan
## 5 129.0174 35.07625     5 FALSE     1 Busan.1 Busan
## 6 129.0174 35.07597     6 FALSE     1 Busan.1 Busan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;데이터 프레임으로 구성했으니 ggplot2를 이용해서 지도를 그릴 수 있다. path를 이용해 각 점을 선으로 연결하는 형태이므로 &lt;code&gt;geom_path()&lt;/code&gt;를 사용하면 되고 데이터에서 &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt; 변수를 이용한다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(shp2_ffd, 
  aes(x=long, y=lat, group=group)) + 
  geom_path()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/e1t1yel4pas24t6/unnamed-chunk-6-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NAME_1&lt;/code&gt; 변수를 기준으로 구분한 지도는 광역단체로만 구분이 되고, 아래와 같이 &lt;code&gt;NAME_2&lt;/code&gt; 변수를 기준으로 fortify시킨경우에는 시(도의 경우), 구(서울 등)로 구분되는 것을 볼 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(shp2_ffd2, 
  aes(x=long, y=lat, group=group)) + 
  geom_path()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/v2bkis5y2tf71tj/unnamed-chunk-7-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;geom_path()&lt;/code&gt;가 아니라 &lt;code&gt;geom_polygon()&lt;/code&gt;을 사용하면 지역별로 색상을 채우는 것이 가능하다. 적용할만한 다른 데이터를 추가하면 히트맵이나 코로플레스같은 시각화를 할 수 있다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(shp2_ffd, aes(x=long, y=lat, group=group)) + 
  geom_polygon(aes(fill=id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/tl02ufsiry4xgqz/unnamed-chunk-8-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt;패키지를 불러와서 난수를 데이터에 대입시키고 어떻게 ggplot2를 이용할 수 있을지 살펴보자.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;shp2_value &amp;lt;- data.frame(
  shp2_ffd %&amp;gt;% 
  select(id) %&amp;gt;%
  distinct,
  value = round(runif(16,10,100)))

shp2_value
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##                   id value
## 1              Busan    24
## 2  Chungcheongbuk-do    76
## 3  Chungcheongnam-do    74
## 4              Daegu    22
## 5            Daejeon    73
## 6         Gangwon-do    68
## 7            Gwangju    34
## 8        Gyeonggi-do    88
## 9   Gyeongsangbuk-do    16
## 10  Gyeongsangnam-do    28
## 11           Incheon    98
## 12              Jeju    56
## 13      Jeollabuk-do    33
## 14      Jeollanam-do    41
## 15             Seoul    96
## 16             Ulsan    32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;각 광역 단체에 적당한 값을 넣은 데이터 프레임을 만들었다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;shp2_data &amp;lt;- shp2_ffd %&amp;gt;%
  left_join(shp2_value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(shp2_data, aes(x=long, y=lat, group=group)) + 
  geom_polygon(aes(fill = value))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/o7319yk4d0mv023/unnamed-chunk-10-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원래의 fortify된 지도에 &lt;code&gt;left_join&lt;/code&gt;을 해서 값을 대입하고, 추가한 열을 &lt;code&gt;geom_polygon&lt;/code&gt;에서 fill값으로 잡아주면 된다. 색상을 변경하려면 scale 값을 조정해주는 함수를 사용하면 된다. 여기서는 &lt;code&gt;RColorBrewer&lt;/code&gt;패키지를 이용하는 &lt;code&gt;scale_fill_distiller&lt;/code&gt;함수를 사용했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(shp2_data, aes(x=long, y=lat, group=group)) + 
  geom_polygon(aes(fill = value)) +
  scale_fill_distiller(palette = &quot;Spectral&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/x91bxbrbve2j1in/unnamed-chunk-11-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이제 지도에서 일부분을 추출해보려고 한다. 예를 들어 서울만 지도를 그리고 싶다면, 맨 처음에 shp 파일을 불러왔을 때 &lt;code&gt;NAME_1&lt;/code&gt; 항목이 &lt;em&gt;Seoul&lt;/em&gt;인 것만 찾아서 &lt;code&gt;fortify&lt;/code&gt;시키면 된다. 이 경우에는 구별로 구분된 지도를 봐야 하기 때문에 region 구분은 &lt;code&gt;NAME_2&lt;/code&gt;를 기준으로 해야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;shp2_subset &amp;lt;- shp2[shp2$NAME_1 == &quot;Seoul&quot;,]
seoul_ffd &amp;lt;- fortify(shp2_subset, region=&quot;NAME_2&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이후에는 위에서 했던 것과 같은 방식으로 지도를 그릴 수 있다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-r&quot;&gt;ggplot(seoul_ffd, aes(x=long, y=lat, group=group)) + 
  geom_polygon(aes(fill=id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/tdf3bk6cpqxfwiz/unnamed-chunk-13-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://lumiamitie.github.io/r/visualization/mapping-with-ggplot2&quot;&gt;Mapping with ggplot2+shp&lt;/a&gt; was originally published by Minho Lee at &lt;a href=&quot;http://lumiamitie.github.io&quot;&gt;lmnsh&lt;/a&gt; on August 08, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[koding.com 에서 Jekyll 활용하기]]></title>
  <link>http://lumiamitie.github.io/web/koding-com</link>
  <id>http://lumiamitie.github.io/web/koding-com</id>
  <published>2015-08-05T00:00:00+09:00</published>
  <updated>2015-08-05T00:00:00+09:00</updated>
  <author>
    <name>Minho Lee</name>
    <uri>http://lumiamitie.github.io</uri>
    <email>lumiamitie@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img src=&quot;../../images/old-book.jpg&quot; alt=&quot;cover-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;kodingcom&quot;&gt;Koding.com&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://koding.com&quot;&gt;Koding&lt;/a&gt;은 Amazon EC2 인스턴스를 기반으로 하는 서비스다. 가입하면 무료로 VM을 하나 받을 수 있다. RAM 1기가에 하드 3기가 뿐이지만 우분투가 기본적으로 설치되어있고, 파이썬이나 루비 등이 미리 세팅되어있다. 무료로 사용하는 동안에는 접속이 끊어지면 VM도 자동으로 종료된다.&lt;/p&gt;

&lt;p&gt;VM내부의 Web 폴더는 github.io 처럼 정적인 호스트를 제공하기 때문에 Jekyll 페이지를 테스트하는 용도로 사용하기로 했다.&lt;/p&gt;

&lt;p&gt;원래 jekyll 페이지를 작성하고 웹페이지로 변환시키려면 &lt;code&gt;jekyll serve&lt;/code&gt; 명령어를 사용한다. 우리는 변환시킨 결과물을 &lt;strong&gt;Web&lt;/strong&gt; 폴더에 보내려고 한다. 이 경우에는 &lt;em&gt;-d&lt;/em&gt; 옵션을 사용하고 (destination) 그 뒤에 대상 폴더의 주소를 지정하면 된다. (~/Web)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jekyll serve -d ~/Web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 Koding.com의 VM이 켜져있는 동안에는 id.koding.io 에서 결과물을 확인할 수 있다&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lumiamitie.github.io/web/koding-com&quot;&gt;koding.com 에서 Jekyll 활용하기&lt;/a&gt; was originally published by Minho Lee at &lt;a href=&quot;http://lumiamitie.github.io&quot;&gt;lmnsh&lt;/a&gt; on August 05, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[jekyll을 사용한 첫 게시물]]></title>
  <link>http://lumiamitie.github.io/web/%EC%B2%AB%EA%B2%8C%EC%8B%9C%EB%AC%BC</link>
  <id>http://lumiamitie.github.io/web/첫게시물</id>
  <published>2015-08-04T00:00:00+09:00</published>
  <updated>2015-08-04T00:00:00+09:00</updated>
  <author>
    <name>Minho Lee</name>
    <uri>http://lumiamitie.github.io</uri>
    <email>lumiamitie@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img src=&quot;../../images/macphoto.jpg&quot; alt=&quot;cover-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jekyll-notepad----&quot;&gt;jekyll Notepad 테마를 적용한 블로그 게시&lt;/h2&gt;

&lt;p&gt;일단은 koding.com에서 테스트 중이다
유료 계정이 아니라 종료하면 VM이 꺼지는데 그러면 호스팅도 종료가 되기 때문에 어느 정도 완성되면 github.io로 업로드할 예정이다&lt;/p&gt;

&lt;p&gt;dropbox에서 공유를 통해 받아오는 주소로는 커버이미지 적용이 안되는 것이 확인되었다
이것이 주소 또는 드랍박스의 문제인지 markdown 문법상의 문제인지 확인을 위해 구글에서 검색한 이미지로 커버 등록을 시도한다&lt;/p&gt;

&lt;p&gt;구글에서 검색한 이미지의 주소로 바로 링크했을 때는 커버 등록이 되는 것을 확인했다&lt;/p&gt;

&lt;p&gt;&lt;em&gt;images&lt;/em&gt;폴더에 저장된 그림파일을 불러오기 위해서는 ../../images/그림파일 의 주소로 연결해주면 된다&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.pexels.com&quot;&gt;pexels&lt;/a&gt;에서 이용 가능한 사진들을 찾았다&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lumiamitie.github.io/web/%EC%B2%AB%EA%B2%8C%EC%8B%9C%EB%AC%BC&quot;&gt;jekyll을 사용한 첫 게시물&lt;/a&gt; was originally published by Minho Lee at &lt;a href=&quot;http://lumiamitie.github.io&quot;&gt;lmnsh&lt;/a&gt; on August 04, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[마크다운에 Dropbox 공유 이미지 링크하기]]></title>
  <link>http://lumiamitie.github.io/web/image-link-test</link>
  <id>http://lumiamitie.github.io/web/image-link-test</id>
  <published>2015-08-04T00:00:00+09:00</published>
  <updated>2015-08-04T00:00:00+09:00</updated>
  <author>
    <name>Minho Lee</name>
    <uri>http://lumiamitie.github.io</uri>
    <email>lumiamitie@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img src=&quot;../../images/taking-notes.jpg&quot; alt=&quot;cover-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;커버이미지를 등록하는 것 때문에 매번 필요한 사진이 생기면 다운로드 받아서 jekyll 폴더에 넣어줘야 하는지 고민하다가 Dropbox에 사진을 넣고 공유해서 그 링크를 첨부하는 방식을 생각했다. 그런데 막상 해보니 제대로 링크가 연결되지 않아서 파일을 직접 넣어주는 방향으로 생각하고 있었는데, 마크다운 문법 때문에 블로그를 돌아다니다가 &lt;a href=&quot;http://scriptogr.am/myevan/post/markdown-syntax-guide-for-scriptogram&quot;&gt;Song Young-jin님의 블로그&lt;/a&gt;에서 적절한 해결 방안을 발견했다.&lt;/p&gt;

&lt;p&gt;원래 공유를 하면 다음과 같은 링크가 주어진다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://www.dropbox.com/s/randomrandom/image.png?dl=0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;여기서 https 를 http로, www를 dl로 변경하고 ?dl=0 을 제거한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://dl.dropbox.com/s/randomrandom/image.png&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 링크를 사용하면 마크다운에서 Dropbox 공유 이미지를 불러올 수 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://dl.dropbox.com/s/hw5qjxa91jy560g/apple_mean_price.png&quot; alt=&quot;서울시 구별 사과 평균가격&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lumiamitie.github.io/web/image-link-test&quot;&gt;마크다운에 Dropbox 공유 이미지 링크하기&lt;/a&gt; was originally published by Minho Lee at &lt;a href=&quot;http://lumiamitie.github.io&quot;&gt;lmnsh&lt;/a&gt; on August 04, 2015.&lt;/p&gt;</content>
</entry>

</feed>
